css性能优化
①　后代选择器更消耗性能 
②　减少使用 HTML 标签来定义 CSS 的方式，换成使用具体的 class
③　避免reflow的风险，触发重排的操作
改变font-size和font-family
改变元素的内外边距
通过JS改变CSS类
通过JS获取DOM元素的位置相关属性（如width/height/left等）
CSS伪类激活
滚动滚动条或者改变窗口大小
④　减少某些 消耗性能的 CSS 属性(border-radius、box-shadow、filter、:nth-child)

js性能优化
①　注意作用域 避免全局查找
②　选择正确方法
优化循环

尽量使用原生方法
使用switch替代if-else
③　最小化语句数  
多个变量申明，js代码中的语句数量也影响所执行的操作的速度，完成多个操作的单个语句要比完成单个操作的多个语句快。
插入迭代值，当使用迭代值（也就是在不同的位置进行增加或减少的值）的时候，尽可能合并。
使用数组和对象字面量，你可能看过两种创建数组和对象的方法：使用构造函数或是使用字面量，使用构造函数总是要用到很多语句来插入元素或定义属性，而字面量可以将这些操作在一个语句中完成(定义一个空对象，逐步插入属性/定一个有属性的对象)
④　优化DOM交互
使用文档碎片减少DOM交互次数，DOM交互越多，性能越慢
使用innerHTML。有两种在页面上创建DOM节点的方法：诸如createElement()和appendChild()之类的DOM方法，以及使用innerHTML
使用事件委托，把事件绑定在祖先节点，由于有事件冒泡，当事件触发时根据event对象的target属性可以知道具体事件是在那个子元素发生的。从而执行不同的行为。这样就不必每个子节点都绑定事件。




垃圾回收机制 
找出那些不再用到的内存（变量），然后释放其内存。现在各大浏览器通常采用的垃圾回收机制有两种方法：标记清除，引用计数。Es6的weakMap 和weakSet 不计入垃圾回收机制 

浏览器输入url后都干了些什么？
·  浏览器的地址栏输入URL并按下回车。
·  浏览器查找当前URL是否存在缓存，并比较缓存是否过期。
·  DNS解析URL对应的IP。
·  根据IP建立TCP连接（三次握手）。
·  HTTP发起请求。
·  服务器处理请求，浏览器接收HTTP响应。
·  渲染页面，构建DOM树。
·  关闭TCP连接（四次挥手）。

http和https
http: 请求信息明文传输，容易被窃听截取。
数据的完整性未校验，容易被篡改
没有验证对方身份，存在冒充危险

https:HTTP+SSL/TLS,通过 SSL证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。
HTTPS协议多次握手，导致页面的加载时间延长近50%；
HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗；
申请SSL证书需要钱，功能越强大的证书费用越高。
SSL涉及到的安全算法会消耗 CPU 资源，对服务器资源消耗较大。

强缓存和协商缓存
强缓存：给资源设置个过期时间，客户端每次请求资源时都会看是否过期；只有在过期才会去询问服务器。所以，强缓存就是为了给客户端自给自足用的
协商缓存：客户端请求该资源时发现其过期了，这是就会去请求服务器了，而这时候去请求服务器的这过程就可以设置协商缓存。这时候，协商缓存就是需要客户端和服务器两端进行交互的。

类数组：拥有length属性 但不具有数组所具有的方法

原型：实例化的属性_proto_（隐式原型）和类的属性prototype（显式原型）都指向同一个对象
每一个对象都有一个隐式原型 指向构建出这个实例的类的显式原型
当一个对象上查询一个属性或者方法的时候 就会往隐式原型上找
原型链：访问一个对象的属性或者方法的时候 先自身上找 找不到会往原型上找 找不到会往原型的原型上找   用hasOwnProperty检验

diff算法 节点复用 https://blog.csdn.net/weixin_39531582/article/details/110636611

Webpack的打包原理：模块打包机， 对文件之间对依赖关系对其进行静态分析，然后将这些模块按规则生成静态资源。
①　打包：将多个文件打包成一个文件，减少服务器压力和下载带宽
②　转换：将预编译语言转换成浏览器识别的语言
③　优化：性能优化

 Vue3的响应式原理：defineProperty不会对数组的每个元素监听；defineProperty不能检测到数组长度的变化（vue2不能检测对象属性的添加或删除）


require和import区别: require是赋值过程,import是解构过程
 模块加载时间
require：运行时加载
	import：编译时加载（效率更高）
